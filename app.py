# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ltlJi0MdG6JZUBuIfdrSl0EAF2NSJwN9
"""



from flask import Flask, request, jsonify
from flask_cors import CORS
import pandas as pd
import numpy as np
import joblib
import logging
import os

# Initialize Flask app
app = Flask(__name__)
CORS(app)  # Enable CORS for frontend

# Set up logging (console logging so Render can capture logs)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s: %(message)s"
)
logger = logging.getLogger(__name__)

# Load the model
try:
    model = joblib.load("xgboost_dropout_model.pkl")
    logger.info("‚úÖ Model loaded successfully")
except Exception as e:
    logger.error(f"‚ùå Failed to load model: {str(e)}")
    raise


# Suggestion function
def get_suggestions(student, predicted_prob):
    suggestions = []

    required_features = [
        'Attendance', 'Current_GPA', 'Previous_GPA', 'GPA_Diff',
        'NonProductive_Hrs', 'Productive_Hrs', 'Club_Score',
        'Internship_Status', 'Family_Income', 'Sentiment_Score'
    ]
    missing = [f for f in required_features if f not in student]
    if missing:
        return [f"‚ö†Ô∏è Missing features: {', '.join(missing)}. Please provide complete data."]

    try:
        if not (0 <= student["Attendance"] <= 100):
            return ["‚ö†Ô∏è Attendance must be between 0 and 100."]
        if not (0 <= student["Current_GPA"] <= 10):
            return ["‚ö†Ô∏è Current_GPA must be between 0 and 10."]
        if not (0 <= student["Previous_GPA"] <= 10):
            return ["‚ö†Ô∏è Previous_GPA must be between 0 and 10."]
        if not (-10 <= student["GPA_Diff"] <= 10):
            return ["‚ö†Ô∏è GPA_Diff must be between -10 and 10."]
        if not (0 <= student["NonProductive_Hrs"] <= 24):
            return ["‚ö†Ô∏è NonProductive_Hrs must be between 0 and 24."]
        if not (0 <= student["Productive_Hrs"] <= 24):
            return ["‚ö†Ô∏è Productive_Hrs must be between 0 and 24."]
        if not (0 <= student["Club_Score"] <= 5):
            return ["‚ö†Ô∏è Club_Score must be between 0 and 5."]
        if student["Internship_Status"] not in [0, 1]:
            return ["‚ö†Ô∏è Internship_Status must be 0 or 1."]
        if not (-1 <= student["Sentiment_Score"] <= 1):
            return ["‚ö†Ô∏è Sentiment_Score must be between -1 and 1."]
        if student["Family_Income"] not in ['<1 LPA', '1-5 LPA', '5-10 LPA', '>10 LPA']:
            return ["‚ö†Ô∏è Family_Income must be one of: <1 LPA, 1-5 LPA, 5-10 LPA, >10 LPA."]
    except TypeError:
        return ["‚ö†Ô∏è Invalid data type for one or more features. Ensure all numeric fields are numbers."]

    # Generate suggestions
    if student["Attendance"] < 60:
        suggestions.append("‚ö†Ô∏è Attendance is low; may risk exam eligibility.")

    if student["Current_GPA"] < 6:
        suggestions.append("üìö GPA is low. Suggest remedial classes or mentoring.")

    if student["GPA_Diff"] < -0.5:
        suggestions.append("üìâ GPA dropped significantly. Recommend academic counseling.")

    if student["NonProductive_Hrs"] > 4:
        suggestions.append("üß† High non-productive hours. Suggest balancing with hobbies or counseling.")

    if student["Productive_Hrs"] < 1:
        suggestions.append("‚è∞ Very low productive study hours. Recommend structured study schedule.")

    if student["Club_Score"] < 2:
        suggestions.append("üé≠ Limited extracurricular involvement. Suggest joining clubs/activities.")

    if student["Internship_Status"] == 0:
        suggestions.append("üíº No internship experience. Suggest applying for internships.")

    if student["Family_Income"] in ['<1 LPA', '1-5 LPA']:
        suggestions.append("üí∞ Low family income. Suggest scholarships/aid programs.")

    if student["Sentiment_Score"] < 0:
        suggestions.append("üòî Negative sentiment. Recommend counseling or peer support.")

    if predicted_prob > 0.8:
        suggestions.append("üö® High dropout risk. Suggest immediate academic advisor support.")

    if not suggestions:
        suggestions.append("‚úÖ Student is managing well. Continue consistent performance.")

    return suggestions


# Prediction API
@app.route('/predict', methods=['POST'])
def predict():
    try:
        data = request.get_json()
        logger.info(f"Received request with data: {data}")

        required_features = [
            'Attendance', 'Current_GPA', 'Previous_GPA', 'GPA_Diff',
            'NonProductive_Hrs', 'Productive_Hrs', 'Club_Score',
            'Internship_Status', 'Family_Income', 'Sentiment_Score'
        ]
        missing = [f for f in required_features if f not in data]
        if missing:
            return jsonify({'error': f"Missing features: {', '.join(missing)}"}), 400

        suggestion_data = data.copy()

        student_df = pd.DataFrame([data])
        student_df = pd.get_dummies(student_df, columns=['Family_Income'])
        for col in model.feature_names_in_:
            if col not in student_df.columns:
                student_df[col] = 0
        student_df = student_df[model.feature_names_in_]

        pred_prob = model.predict(student_df)[0]
        pred_prob = np.clip(pred_prob, 0, 1)

        suggestions = get_suggestions(suggestion_data, pred_prob)

        return jsonify({
            'dropout_probability': round(pred_prob * 100, 1),
            'suggestions': suggestions
        })

    except Exception as e:
        logger.error(f"Error processing request: {str(e)}")
        return jsonify({'error': str(e)}), 500


if __name__ == "__main__":
    # Render provides PORT environment variable
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=False)

